{"version":3,"sources":["webpack:///../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack:///./src/assets/consent_invite.svg","webpack:///./src/assets/consent_automatic.svg","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelContent.ts","webpack:///./src/views/participation/SelectionMethod.vue?f463","webpack:///src/views/participation/SelectionMethod.vue","webpack:///./src/views/participation/SelectionMethod.vue?9313","webpack:///./src/views/participation/SelectionMethod.vue","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts","webpack:///./src/assets/consent_manual.svg","webpack:///../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"names":["name","provide","expansionPanels","this","props","accordion","disabled","flat","hover","focusable","inset","popout","readonly","tile","Boolean","computed","classes","created","$attrs","hasOwnProperty","Array","value","length","methods","updateItem","getValue","item","nextValue","index","toggleMethod","module","exports","baseMixins","isActive","expansionPanel","beforeDestroy","render","h","showLazyContent","staticClass","directives","class","_vm","_h","$createElement","_c","_self","_v","attrs","experiment","participationType","on","$event","setParticipationType","staticRenderFns","component","VBtn","VExpansionPanel","VExpansionPanelContent","VExpansionPanelHeader","VExpansionPanels","ripple","disableIconRotate","expandIcon","type","default","hideActions","data","hasMousedown","isDisabled","isReadonly","onClick","genIcon","icon","setBackgroundColor","tabindex","click","mousedown","mouseup","open","content","header","nextIsActive","groupClasses","registerContent","unregisterContent","registerHeader","vm","unregisterHeader","e","toggle","isBooted","String"],"mappings":"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","file":"js/chunk-7eb255ce.0638e70e.js","sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","module.exports = __webpack_public_path__ + \"img/consent_invite.1353165b.svg\";","module.exports = __webpack_public_path__ + \"img/consent_automatic.6b63780d.svg\";","// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  computed: {\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',{staticClass:\"mb-3\"},[_vm._v(\"How will study participation be determined?\")]),_c('v-expansion-panels',{staticClass:\"v-expansion-panels--icon\",attrs:{\"flat\":\"\"}},[_c('v-expansion-panel',{class:{'v-expansion-panel--selected':_vm.experiment.participationType==='CONSENT'}},[_c('v-expansion-panel-header',{attrs:{\"hide-actions\":\"\"}},[_c('img',{attrs:{\"src\":require(\"@/assets/consent_invite.svg\"),\"alt\":\"invite students\"}}),_vm._v(\" \"),_c('strong',[_vm._v(\"Students will be invited to consent\")])]),_c('v-expansion-panel-content',[_c('p',[_vm._v(\"Select this option if you would like to create a consent assignment within Canvas\")]),_c('v-btn',{attrs:{\"color\":\"primary\",\"elevation\":\"0\"},on:{\"click\":function($event){return _vm.setParticipationType('CONSENT')}}},[_vm._v(\"Select\")])],1)],1),_c('v-expansion-panel',{class:{'v-expansion-panel--selected':_vm.experiment.participationType==='MANUAL'}},[_c('v-expansion-panel-header',{attrs:{\"hide-actions\":\"\"}},[_c('img',{attrs:{\"src\":require(\"@/assets/consent_manual.svg\"),\"alt\":\"manually decide students\"}}),_vm._v(\" \"),_c('strong',[_vm._v(\"Teacher will manually decide\")])]),_c('v-expansion-panel-content',[_c('p',[_vm._v(\"Select this option if you are working with minors or will be collecting parental consent\")]),_c('v-btn',{attrs:{\"color\":\"primary\",\"elevation\":\"0\"},on:{\"click\":function($event){return _vm.setParticipationType('MANUAL')}}},[_vm._v(\"Select\")])],1)],1),_c('v-expansion-panel',{class:{'v-expansion-panel--selected':_vm.experiment.participationType==='AUTO'}},[_c('v-expansion-panel-header',{attrs:{\"hide-actions\":\"\"}},[_c('img',{attrs:{\"src\":require(\"@/assets/consent_automatic.svg\"),\"alt\":\"automatically include all students\"}}),_vm._v(\" \"),_c('strong',[_vm._v(\"Automatically include all students\")])]),_c('v-expansion-panel-content',[_c('p',[_vm._v(\"Select this option if informed consent is not needed to run the study\")]),_c('v-btn',{attrs:{\"color\":\"primary\",\"elevation\":\"0\"},on:{\"click\":function($event){return _vm.setParticipationType('AUTO')}}},[_vm._v(\"Select\")])],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n\t<div>\r\n\t\t<h1 class=\"mb-3\">How will study participation be determined?</h1>\r\n<!--\t\t<v-btn elevation=\"0\" color=\"primary\" :to=\"{name: 'ExperimentParticipationSelectionMethod'}\">Continue</v-btn>-->\r\n\r\n\t\t<v-expansion-panels class=\"v-expansion-panels--icon\" flat>\r\n\r\n\t\t\t<v-expansion-panel :class=\"{'v-expansion-panel--selected':experiment.participationType==='CONSENT'}\">\r\n\t\t\t\t<v-expansion-panel-header hide-actions><img src=\"@/assets/consent_invite.svg\" alt=\"invite students\"> <strong>Students will be invited to consent</strong></v-expansion-panel-header>\r\n\t\t\t\t<v-expansion-panel-content>\r\n\t\t\t\t\t<p>Select this option if you would like to create a consent assignment within Canvas</p>\r\n\t\t\t\t\t<v-btn @click=\"setParticipationType('CONSENT')\" color=\"primary\" elevation=\"0\">Select</v-btn>\r\n\t\t\t\t</v-expansion-panel-content>\r\n\t\t\t</v-expansion-panel>\r\n\r\n\t\t\t<v-expansion-panel :class=\"{'v-expansion-panel--selected':experiment.participationType==='MANUAL'}\">\r\n\t\t\t\t<v-expansion-panel-header hide-actions><img src=\"@/assets/consent_manual.svg\" alt=\"manually decide students\"> <strong>Teacher will manually decide</strong></v-expansion-panel-header>\r\n\t\t\t\t<v-expansion-panel-content>\r\n\t\t\t\t\t<p>Select this option if you are working with minors or will be collecting parental consent</p>\r\n\t\t\t\t\t<v-btn @click=\"setParticipationType('MANUAL')\" color=\"primary\" elevation=\"0\">Select</v-btn>\r\n\t\t\t\t</v-expansion-panel-content>\r\n\t\t\t</v-expansion-panel>\r\n\r\n\t\t\t<v-expansion-panel :class=\"{'v-expansion-panel--selected':experiment.participationType==='AUTO'}\">\r\n\t\t\t\t<v-expansion-panel-header hide-actions><img src=\"@/assets/consent_automatic.svg\" alt=\"automatically include all students\"> <strong>Automatically include all students</strong></v-expansion-panel-header>\r\n\t\t\t\t<v-expansion-panel-content>\r\n\t\t\t\t\t<p>Select this option if informed consent is not needed to run the study</p>\r\n\t\t\t\t\t<v-btn @click=\"setParticipationType('AUTO')\" color=\"primary\" elevation=\"0\">Select</v-btn>\r\n\t\t\t\t</v-expansion-panel-content>\r\n\t\t\t</v-expansion-panel>\r\n\r\n\t\t</v-expansion-panels>\r\n\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\n\r\nexport default {\r\n\tname: 'ParticipationSelectionMethod',\r\n\tprops: ['experiment'],\r\n\tmethods: {\r\n\t\t...mapActions({\r\n\t\t\treportStep: 'api/reportStep',\r\n\t\t\tupdateExperiment: 'experiment/updateExperiment',\r\n\t\t}),\r\n\t\tsetParticipationType(type) {\r\n\t\t\tconst e = this.experiment\r\n\t\t\te.participationType = type\r\n\r\n\t\t\tconst experimentId = e.experimentId\r\n\t\t\tconst step = \"participation_type\"\r\n\r\n\t\t\tthis.updateExperiment(e)\r\n\t\t\t\t\t.then(response => {\r\n            if (typeof response?.status !== \"undefined\" && response?.status === 200) {\r\n              // report the current step\r\n              this.reportStep({experimentId, step})\r\n\r\n              // route based on participation type selection\r\n              if (e.participationType==='CONSENT') {\r\n                this.$router.push({name:'ParticipationTypeConsentOverview', params:{experiment: experimentId}})\r\n              } else if(e.participationType==='MANUAL') {\r\n                this.$router.push({name:'ParticipationTypeManual', params:{experiment: experimentId}})\r\n              } else if(e.participationType==='AUTO') {\r\n                this.$router.push({name:'ParticipationTypeAutoConfirm', params:{experiment:experimentId}})\r\n              } else {\r\n                alert(\"Select a participation type\")\r\n              }\r\n            } else if (response?.message) {\r\n              alert(`Error: ${response.message}`)\r\n            } else {\r\n              alert('There was an error saving your experiment.')\r\n            }\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(response => {\r\n            console.error(\"updateExperiment | catch\", {response})\r\n            alert('There was an error saving the experiment.')\r\n\t\t\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectionMethod.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectionMethod.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SelectionMethod.vue?vue&type=template&id=4cb79403&\"\nimport script from \"./SelectionMethod.vue?vue&type=script&lang=js&\"\nexport * from \"./SelectionMethod.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VExpansionPanel } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelContent } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelHeader } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanels } from 'vuetify/lib/components/VExpansionPanel';\ninstallComponents(component, {VBtn,VExpansionPanel,VExpansionPanelContent,VExpansionPanelHeader,VExpansionPanels})\n","// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.isActive,\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n","module.exports = __webpack_public_path__ + \"img/consent_manual.25a7171a.svg\";","// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n"],"sourceRoot":""}